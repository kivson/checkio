

def check_linha(grid, x):
    """
    >>> check_linha([[3, 7, 1, 6, 8, 4, 9, 5, 2], [8, 4, 9, 7, 2, 5, 3, 6, 1], [5, 6, 2, 9, 3, 1, 4, 7, 8],[6, 8, 7, 2, 1, 9, 5, 3, 4], [9, 1, 4, 3, 5, 7, 2, 8, 6], [2, 5, 3, 8, 4, 6, 1, 9, 7],[1, 3, 6, 5, 7, 2, 8, 4, 9], [4, 9, 8, 1, 6, 3, 7, 2, 5], [7, 2, 5, 4, 9, 8, 6, 1, 3]], 4)
    0
    >>> check_linha([[3, 7, 1, 6, 8, 4, 9, 5, 2], [8, 4, 9, 7, 2, 5, 3, 6, 1], [5, 6, 2, 9, 3, 1, 4, 7, 8],[6, 8, 7, 2, 1, 9, 5, 3, 4], [9, 1, 4, 3, 5, 7, 2, 8, 6], [2, 5, 3, 8, 4, 6, 1, 9, 7],[1, 3, 6, 5, 7, 2, 8, 4, 9], [4, 9, 8, 1, 6, 3, 7, 2, 5], [7, 2, 5, 4, 9, 8, 6, 1, 3]], 5)
    0

    """
    linha = grid[x]
    return 9 - len(set(linha)) + 9 - len([1 for i in linha if 0 < i < 10])


def check_box(grid, x, y):
    """
    >>> check_box([[3, 7, 1, 6, 8, 4, 9, 5, 2], [8, 4, 9, 7, 2, 5, 3, 6, 1], [5, 6, 2, 9, 3, 1, 4, 7, 8],[6, 8, 7, 2, 1, 9, 5, 3, 4], [9, 1, 4, 3, 5, 7, 2, 8, 6], [2, 5, 3, 8, 4, 6, 1, 9, 7],[1, 3, 6, 5, 7, 2, 8, 4, 9], [4, 9, 8, 1, 6, 3, 7, 2, 5], [7, 2, 5, 4, 9, 8, 6, 1, 3]], 0,1)
    0
    >>> check_box([[3, 7, 1, 6, 8, 4, 9, 5, 2], [8, 4, 9, 7, 2, 5, 3, 6, 1], [5, 6, 2, 9, 3, 1, 4, 7, 8],[6, 8, 7, 2, 1, 9, 5, 3, 4], [9, 1, 4, 3, 5, 7, 2, 8, 6], [2, 5, 3, 8, 4, 6, 1, 9, 7],[1, 3, 6, 5, 7, 2, 8, 4, 9], [4, 9, 8, 1, 6, 3, 7, 2, 5], [7, 2, 5, 4, 9, 8, 8, 0, 1]], 2,2)
    2

    """
    linha = [grid[i][j] for i in range(3 * x, 3 * x + 3) for j in range(3 * y, 3 * y + 3)]
    return 9 - len(set(linha)) + 9 - len([1 for i in linha if 0 < i < 10])


def check_coluna(grid, col):
    """
    >>> check_coluna([[3, 7, 1, 6, 8, 4, 9, 5, 2], [8, 4, 9, 7, 2, 5, 3, 6, 1], [5, 6, 2, 9, 3, 1, 4, 7, 8],[6, 8, 7, 2, 1, 9, 5, 3, 4], [9, 1, 4, 3, 5, 7, 2, 8, 6], [2, 5, 3, 8, 4, 6, 1, 9, 7],[1, 3, 6, 5, 7, 2, 8, 4, 9], [4, 9, 8, 1, 6, 3, 7, 2, 5], [7, 2, 5, 4, 9, 8, 6, 1, 3]], 4)
    0
    >>> check_coluna([[3, 7, 1, 6, 8, 4, 9, 5, 2], [8, 4, 9, 7, 2, 5, 3, 6, 1], [5, 6, 2, 9, 3, 1, 4, 7, 8],[6, 8, 7, 2, 1, 9, 5, 3, 4], [9, 1, 4, 3, 5, 7, 2, 8, 6], [2, 5, 3, 8, 4, 6, 1, 9, 7],[1, 3, 6, 5, 7, 2, 8, 4, 9], [4, 9, 8, 1, 6, 3, 7, 2, 5], [7, 2, 5, 4, 9, 8, 6, 1, 3]], 5)
    0

    """
    linha = [grid[i][col] for i in range(9)]
    return 9 - len(set(linha)) + 9 - len([1 for i in linha if 0 < i < 10])


def check_all(grid):
    """
    >>> check_all([[3, 7, 1, 6, 8, 4, 9, 5, 2], [8, 4, 9, 7, 2, 5, 3, 6, 1], [5, 6, 2, 9, 3, 1, 4, 7, 8],[6, 8, 7, 2, 1, 9, 5, 3, 4], [9, 1, 4, 3, 5, 7, 2, 8, 6], [2, 5, 3, 8, 4, 6, 1, 9, 7],[1, 3, 6, 5, 7, 2, 8, 4, 9], [4, 9, 8, 1, 6, 3, 7, 2, 5], [7, 2, 5, 4, 9, 8, 6, 1, 3]])
    True
    >>> check_all([[3, 7, 1, 6, 8, 4, 9, 5, 2], [8, 4, 9, 7, 2, 5, 3, 6, 1], [5, 6, 2, 9, 3, 1, 4, 7, 8],[6, 8, 7, 2, 1, 9, 5, 3, 4], [9, 1, 4, 3, 5, 7, 2, 8, 6], [2, 5, 3, 8, 4, 6, 1, 9, 7],[1, 3, 6, 5, 7, 2, 8, 4, 9], [4, 9, 8, 1, 6, 3, 7, 2, 5], [7, 2, 5, 4, 9, 8, 6, 1, 1]])
    False

    :param grid:
    :return:
    """
    return sum([check_coluna(grid, i) + check_linha(grid, i) + check_box(grid, i / 3, i % 3) for i in xrange(9)]) == 0

def avalia(grid):
    return sum([check_coluna(grid, i) + check_linha(grid, i) + check_box(grid, i / 3, i % 3) for i in xrange(9)])

def encontra_opcoes(grid, posicao):
    """
    >>> encontra_opcoes([[3, 7, 1, 6, 8, 4, 9, 5, 2], [8, 4, 9, 7, 2, 5, 3, 6, 1], [5, 6, 2, 9, 3, 1, 4, 7, 8],[6, 8, 7, 2, 1, 9, 5, 3, 4], [9, 1, 4, 3, 5, 7, 2, 8, 6], [2, 5, 3, 8, 4, 6, 1, 9, 7],[1, 3, 6, 5, 7, 2, 8, 4, 9], [4, 9, 8, 1, 6, 3, 7, 2, 5], [7, 2, 5, 4, 9, 8, 6, 1, 0]],(8,8))
    set([3])
    """
    x, y = posicao
    return {0, 1, 3, 2, 4, 5, 6, 7, 8, 9} - (set([grid[i][j] for i in range(3 * (x/3), 3 *(x/3) + 3) for j in range(3 * (y/3), 3 * (y/3) + 3)]) | set(grid[x]) | set([grid[i][y] for i in range(9)]))

def print_grid(grid):
    print "_"*18 + str(avalia(grid))
    print "\n".join("|".join(str(x) for x in linha) for linha in grid)

def checkio(grid, pos=0):  # Return the solution of the sudoku.

    lista_mudancas = [(i,j) for i in range(len(grid)) for j in range(len(grid[0])) if grid[i][j] == 0]
    if len(lista_mudancas) == 0:
        return grid

    opcoes = encontra_opcoes(grid, lista_mudancas[pos])
    novo_grid = [x[:] for x in grid]
    for opcao in opcoes:
        novo_grid[lista_mudancas[pos][0]][lista_mudancas[pos][1]] = opcao

        resp = checkio(novo_grid)
        if resp:
            return resp
    return False





if __name__ == '__main__':
    # These "asserts" using only for self-checking and not necessary for auto-testing
    assert checkio([[0, 7, 1, 6, 8, 4, 0, 0, 0],
                    [0, 4, 9, 7, 0, 0, 0, 0, 0],
                    [5, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 8, 0, 0, 0, 0, 5, 0, 4],
                    [0, 0, 0, 3, 0, 7, 0, 0, 0],
                    [2, 0, 3, 0, 0, 0, 0, 9, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 9],
                    [0, 0, 0, 0, 0, 3, 7, 2, 0],
                    [0, 0, 0, 4, 9, 8, 6, 1, 0]]) == [[3, 7, 1, 6, 8, 4, 9, 5, 2],
                                                      [8, 4, 9, 7, 2, 5, 3, 6, 1],
                                                      [5, 6, 2, 9, 3, 1, 4, 7, 8],
                                                      [6, 8, 7, 2, 1, 9, 5, 3, 4],
                                                      [9, 1, 4, 3, 5, 7, 2, 8, 6],
                                                      [2, 5, 3, 8, 4, 6, 1, 9, 7],
                                                      [1, 3, 6, 5, 7, 2, 8, 4, 9],
                                                      [4, 9, 8, 1, 6, 3, 7, 2, 5],
                                                      [7, 2, 5, 4, 9, 8, 6, 1, 3]], "first"
    assert checkio([[5, 0, 0, 7, 1, 9, 0, 0, 4],
                    [0, 0, 1, 0, 3, 0, 5, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 8, 5, 9, 7, 2, 6, 4, 0],
                    [0, 0, 0, 6, 0, 1, 0, 0, 0],
                    [0, 2, 6, 3, 8, 5, 9, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 3, 0, 5, 0, 2, 0, 0],
                    [8, 0, 0, 4, 9, 7, 0, 0, 6]]) == [[5, 6, 8, 7, 1, 9, 3, 2, 4],
                                                      [9, 7, 1, 2, 3, 4, 5, 6, 8],
                                                      [2, 3, 4, 5, 6, 8, 7, 9, 1],
                                                      [1, 8, 5, 9, 7, 2, 6, 4, 3],
                                                      [3, 9, 7, 6, 4, 1, 8, 5, 2],
                                                      [4, 2, 6, 3, 8, 5, 9, 1, 7],
                                                      [6, 1, 9, 8, 2, 3, 4, 7, 5],
                                                      [7, 4, 3, 1, 5, 6, 2, 8, 9],
                                                      [8, 5, 2, 4, 9, 7, 1, 3, 6]], "second"
    print('Local tests done')
